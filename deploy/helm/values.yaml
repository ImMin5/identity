###############################
# DEFAULT 
###############################
enabled: true
developer: false
grpc: true
scheduler: true
worker: true
rest: false
name: identity
image:
  name: spaceone/identity
  version: latest
imagePullPolicy: IfNotPresent

resources: { }
#     grpc: 
#         requests:
#             memory: "128Mi"
#             cpu: "25m"
#         limits:
#             memory: "256Mi"
#             cpu: "50m"
#     rest: 
#         requests:
#             memory: "128Mi"
#             cpu: "25m"
#         limits:
#             memory: "256Mi"
#             cpu: "50m"
#     scheduler: 
#         requests:
#             memory: "128Mi"
#             cpu: "25m"
#         limits:
#             memory: "256Mi"
#             cpu: "50m"
#     worker: 
#         requests:
#             memory: "128Mi"
#             cpu: "25m"
#         limits:
#             memory: "256Mi"
#             cpu: "50m"

database: { }

###########################################################
# if you want to use API key or spacectl
# Put full FQDN at endpoint
# Ex) endpoint: grpc://identity.example.com:50051
# grpc is for gRPC ALB ingress controller
# If you want to use NLB instead of ALB, 
# You have to use grpc://identity.example.com:50051/v1
###########################################################
application_grpc:
  ENDPOINTS:
    - service: identity
      name: Identity Service
      endpoint: grpc://identity:50051
    - service: inventory
      name: Inventory Service
      endpoint: grpc://inventory:50051
    - service: cost_analysis
      name: Cost Analysis Service
      endpoint: grpc://cost:50051
    - service: dashboard
      name: Dashboard Service
      endpoint: grpc://cost:50051
    - service: repository
      name: Repository Service
      endpoint: grpc://repository:50051
    - service: board
      name: Board Service
      endpoint: grpc://board:50051
    - service: secret
      name: Secret Manager
      endpoint: grpc://secret:50051
    - service: config
      name: Config Service
      endpoint: grpc://config:50051
    - service: file_manager
      name: File Manager
      endpoint: grpc://file-manager:50051
    - service: plugin
      name: Plugin Manager
      endpoint: grpc://plugin:50051
    - service: search
      name: Search Service
      endpoint: grpc://search:50051

application_rest: { }

# Overwrite scheduler config
application_scheduler:
  QUEUES:
    identity_q:
      backend: spaceone.core.queue.redis_queue.RedisQueue
      host: redis
      port: 6379
      channel: identity_job

  SCHEDULERS:
    trusted_account_sync_scheduler:
      backend: spaceone.identity.interface.task.v1.trusted_account_sync_scheduler.TrustedAccountSyncScheduler
      queue: identity_q
      interval: 1
      minute: ':00'
    dormancy_scheduler:
      backend: spaceone.identity.interface.task.v1.dormancy_scheduler.DormancyScheduler
      queue: identity_q
      interval: 1
      minute: ':30'
    expiring_app_check_scheduler:
      backend: spaceone.identity.interface.task.v1.expiring_app_check_scheduler.ExpiringAppCheckScheduler
      queue: identity_q
      interval: 1
      minute: ':00'

# Overwrite worker config
application_worker:
  QUEUES:
    identity_q:
      backend: spaceone.core.queue.redis_queue.RedisQueue
      host: redis
      port: 6379
      channel: identity_job
  WORKERS:
    identity_worker:
      backend: spaceone.core.scheduler.worker.BaseWorker
      queue: identity_q
      pool: 1

##########################
# local sidecar
##########################
sidecar:
  rest_web:
    image:
      name: nginx
      version: stable
      imagePullPolicy: IfNotPresent
    resources: { }
    #     requests:
    #         memory: "128Mi"
    #         cpu: "25m"
    #     limits:
    #         memory: "256Mi"
    #         cpu: "50m"
  grpc: { }
  rest: { }
  scheduler: { }
  worker: { }

##########################
# Local volumes
##########################
volumes:
  - name: timezone
    hostPath:
      path: /usr/share/zoneinfo/Asia/Seoul
  - name: log-volume
    emptyDir: { }

#######################
# global variable
#######################
global:
  shared: { }
  backend:
    sidecar: [ ]
    #        - name: mongos
    #          image: mongo:4.4.0-bionic
    #          command: [ 'mongos', '--config', '/mnt/mongos.yml', '--bind_ip_all' ]
    #          volumeMounts:
    #            - name: mongos-conf
    #              mountPath: /mnt/mongos.yml
    #              subPath: mongos.yml
    #              readOnly: true
    #            - name: mongo-shard-key
    #              mountPath: /opt/mongos/mongo-shard.pem
    #              subPath: mongo-shard.pem
    #              readOnly: true
    #
    volumes: [ ]
  #        - name: mongo-shard-key
  #          secret:
  #              defaultMode: 0400
  #              secretName: mongo-shard-key
  #        - name: mongos-conf
  #          configMap:
  #              name: mongos-conf
  #        - name: shared-conf
  #          configMap:
  #              name: shared-conf

# Service
service:
  grpc:
    type: ClusterIP
    annotations:
      nil: nil
    ports:
      - name: grpc
        port: 50051
        targetPort: 50051
        protocol: TCP

################################
# volumeMount per deployment
################################
volumeMounts:
  application_grpc: [ ]
  application_rest: [ ]
  application_scheduler: [ ]
  application_worker: [ ]


####################################
# pod spec (append more pod spec)
# example nodeSelect
#
# pod:
#   spec:
#     nodeSelector:
#       application: my-node-group
####################################
pod:
  spec: { }
